apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-aio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-aio
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-aio
    spec:
      securityContext:
        sysctls:
          - name: net.ipv4.ip_unprivileged_port_start
            value: "0"
      initContainers:
        - name: init-db
          image: "{{ .Values.hoppscotch.image.repository }}:{{ .Values.hoppscotch.image.tag }}"
          imagePullPolicy: {{ .Values.hoppscotch.image.pullPolicy }} 
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.global.postgresql.auth.existingSecret | default (printf "%s-postgresql" .Release.Name) }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.userPasswordKey | default "password" }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.global.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.global.postgresql.auth.database }}"
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          resources:
            {{- toYaml .Values.hoppscotch.resources | nindent 12 }}
          command: [ "/bin/sh", "-c" ]
          args:
            - "set -e; pnpx prisma migrate deploy"
      containers:
        - name: hoppscotch-aio
          image: {{ .Values.hoppscotch.image.repository }}:{{ .Values.hoppscotch.image.tag }}
          ports:
            - containerPort: 3000
            - containerPort: 3100
            - containerPort: 3170
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 20
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.global.postgresql.auth.existingSecret | default (printf "%s-postgresql" .Release.Name) }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.userPasswordKey | default "password" }}
            - name: DATABASE_URL
              value: "postgres://{{ .Values.postgresql.global.postgresql.auth.username }}:$(POSTGRES_PASSWORD)@{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.global.postgresql.auth.database }}"
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.hoppscotch.auth.existingSecret | default (printf "%s-secrets" .Release.Name) }}
                  key: jwt_secret
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.hoppscotch.auth.existingSecret | default (printf "%s-secrets" .Release.Name) }}
                  key: session_secret
            - name: MAILER_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.hoppscotch.auth.existingSecret | default (printf "%s-secrets" .Release.Name) }}
                  key: mailer_smtp_password
            - name: DATA_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.hoppscotch.auth.existingSecret | default (printf "%s-secrets" .Release.Name) }}
                  key: data_encryption_key
            {{- range $key, $value := .Values.hoppscotch.env }}
            - name: {{ $key }}
              value: "{{ $value }}"
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
