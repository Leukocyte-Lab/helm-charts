{{- if .Values.core.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: core
  labels:
    {{- include "AGH2.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app: core
  template:
    metadata:
      labels:
        app: core
    spec:
      {{- include "core.imagePullSecrets" . | nindent 6 }}
      initContainers:
        {{- if and .Values.redis.enabled .Values.attack.service.redis.enabled }}
        - name: core-init-redis
          image: {{ include "redis.image" . }}
          command:
            [
              "sh",
              "-c",
              "until redis-cli --no-auth-warning -h $REDIS_SERVICE_HOST -p $REDIS_SERVICE_PORT ping; do echo waiting for redis; sleep 1; done",
            ]
        {{- end }}
        - name: core-init-postgresql
          image: {{ include "db.image" . }}
          env:
            - name: PG_CONN_STR
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.core.secret.db.secretName }}
                  key: DB_CONN_STR
          command:
            [
              "sh",
              "-c",
              "until pg_isready -d $PG_CONN_STR; do echo waiting for postgresql; sleep 1; done",
            ]
      containers:
        - name: core
          image: {{ include "core.image" . }}
          command:
            - ./core
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if and .Values.redis.enabled .Values.captain.service.redis.enabled }}
            - name: ENV_REDIS_CONN
              value: "redis://redis.$(NAMESPACE).svc.cluster.local:6379/0"
            {{- end }}
            {{- if .Values.attack.enabled }}
            - name: ATTACK_DB_Conn
              valueFrom:
                secretKeyRef:
                  key: DB_CONN_STR
                  name: {{ .Values.attack.secret.db.secretName }}
            {{- end }}
            {{- if .Values.exploitmgr.enabled }}
            - name: EXP_MGR_DB_Conn
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.exploitmgr.secret.db.secretName }}
                  key: DB_CONN_STR
            {{- end }}
            {{- if .Values.blender.enabled }}
            - name: BLENDER_URL
              value: "blender.$(NAMESPACE).svc.cluster.local:50005"
            {{- end }}
            {{- if .Values.exploitmgr.enabled }}
            - name: EXPLOITMGR_URL
              value: "exploitmgr.$(NAMESPACE).svc.cluster.local:50005"
            {{- end }}
            {{- if .Values.matcher.enabled }}
            - name: MATCHER_URL
              value: "matcher.$(NAMESPACE).svc.cluster.local:50005"
            {{- end }}
            {{- if .Values.transformer.enabled }}
            - name: TRANSFORMER_URL
              value: "transformer.$(NAMESPACE).svc.cluster.local:50005"
            {{- end }}
            - name: MINIO_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.minio.secret.secretName }}
                  key: url
            - name: MINIO_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.core.secret.minio.secretName }}
                  key: core-minio-user
            - name: MINIO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.core.secret.minio.secretName }}
                  key: core-minio-password
            - name: DB_Conn
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.captain.secret.db.secretName }}
                  key: "DB_CONN_STR"
            - name: CORE_URL
              value: "core.$(NAMESPACE).svc.cluster.local:50005"
            - name: REGISTRY_URL
              value: {{ required "at least one of core.env.REGISTRY_URL or global.imageRegistry is required" (coalesce .Values.core.env.REGISTRY_URL .Values.global.imageRegistry) }}
            {{- if .Values.core.extraEnv }}
            {{- include "common.tplvalues.render" (dict "value" .Values.core.extraEnv "context" $) | nindent 12 }}
            {{- end }}
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
          ports:
            - name: grpc
              containerPort: 50005
          imagePullPolicy: {{ .Values.core.image.pullPolicy }}
      restartPolicy: Always
      automountServiceAccountToken: true
      serviceAccountName: core-svc-account
{{- end }}
