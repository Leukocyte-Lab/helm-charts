{{- if and .Values.db.internal.enabled .Values.postgresql.enabled .Values.postgresql.primary.initdb.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.postgresql.primary.initdb.scriptsConfigMap }}
  labels:
    {{- include "AGH2.labels" . | nindent 4 }}
data:
  init.sh: |

    {{- if .Values.captain.enabled }}
    curl https://api.keygen.sh/v1/accounts/{{ .Values.captain.secret.keygen.accountID }}/artifacts/attack.sql.tgz \
      -H 'Authorization: Bearer {{ .Values.captain.secret.keygen.apiToken }}' \
      -H 'Accept: application/vnd.api+json' | jq '.data.links.redirect' | cut -d, -f 3 | xargs curl > /tmp/attack.sql.tgz
    tar -xzf /tmp/attack.sql.tgz -C /tmp

    {{- if .Values.captain.secret.db.user }}
    sed -i '1s/^/SET ROLE {{ .Values.captain.secret.db.user | quote }};\n\n /' /tmp/attack.sql
    {{- end }}
    sed -i '1s/^/\\c {{ .Values.captain.secret.db.name }}\n\n\n /' /tmp/attack.sql
    {{- end }}

    cat <<EOF > /tmp/init.sql
    CREATE ROLE "{{ .Values.db.connection.user }}" WITH
      LOGIN
      NOSUPERUSER
      INHERIT
      NOCREATEDB
      NOCREATEROLE
      NOREPLICATION
      PASSWORD '{{ .Values.db.connection.password }}';
    {{- $global := .Values }}
    {{- range values .Values }}
      {{- $module := . }}
      {{- if and $module.enabled (hasKey $module "secret") (hasKey $module.secret "db") }}
        {{- if and (hasKey $module.secret.db "user") (hasKey $module.secret.db "password") }}
          {{- $user := coalesce $module.secret.db.user $global.db.connection.user }}
          {{- $password := coalesce
            $module.secret.db.password
            $global.db.connection.password
            (
              include "specify-password"
                (
                  dict
                    "domain" (default $global.ingress.host "app.argushack.com")
                    "token" $global.captain.secret.keygen.apiToken
                    "prefix" $module.secret.db.secretName
                )
            )
          }}
          {{- if ne $user $global.db.connection.user }}
    CREATE ROLE "{{ $user }}" WITH
      LOGIN
      NOSUPERUSER
      INHERIT
      NOCREATEDB
      NOCREATEROLE
      NOREPLICATION
      PASSWORD '{{ $password }}';
          {{- end }}
          {{- if $module.secret.db.name }}
    -- Create DB {{ $module.secret.db.name }}
    CREATE DATABASE "{{ $module.secret.db.name }}" WITH 
      OWNER = '{{ $user }}'
      ENCODING = 'UTF8'
      CONNECTION LIMIT = -1;
    \c {{ $module.secret.db.name }}
    CREATE EXTENSION IF NOT EXISTS pgroonga;
    GRANT USAGE ON SCHEMA pgroonga TO "{{ $user }}";
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
    EOF

    {{-
      $postgresPassword :=
        default
          .Values.postgresql.auth.postgresPassword
          (
            include "specify-password"
              (
                dict
                  "domain" (default .Values.ingress.host "app.argushack.com")
                  "token" .Values.captain.secret.keygen.apiToken
                  "prefix" (printf "%s--%s" .Values.postgresql.auth.existingSecret "postgresql-password")
              )
          )
        | quote
    }}

    . /opt/bitnami/scripts/libpostgresql.sh && postgresql_enable_nss_wrapper && PGPASSWORD={{ $postgresPassword }} psql -f /tmp/init.sql &&
    . /opt/bitnami/scripts/libpostgresql.sh && postgresql_enable_nss_wrapper && PGPASSWORD={{ $postgresPassword }} psql -f /tmp/attack.sql
{{- end }}
